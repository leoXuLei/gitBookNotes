{"./":{"url":"./","title":"简介","keywords":"","body":" GitBook 是什么 官方给的定义： GitBook is a command line tool (and Node.js library) for building beautiful books using GitHub/Git and Markdown (or AsciiDoc). GitBook 是使用 GitHub/Git 和 Markdown 构建漂亮书籍的命令行工具（和Node.js库）。 GitBook 支持 Markdown 和 AsciiDoc 两种语法格式，能够输出 html、pdf、epub、mobi 等多种格式。 GitBook.com 是使用 GitBook 格式创建和托管图书的在线平台。它提供托管，协作功能和易于使用的编辑器。 GitBook 新版官网(需要FQ) 和 旧版官网(无需FQ)两个网站。目前均正常提供服务，但令人遗憾的是，两个网站的信息相互独立，而且现在注册的账号默认只能在新版官网中使用，而新版官网的访问速度简直比 github 还要慢，所以国内用户在线访问你的电子书真的需要点技术手段了！ 特点 支持Markdown 或 AsciiDoc 语法 多类型支持：网站(html)或电子书 (pdf、epub、mobi) 多语言 目录、大纲 插件 主题 为什么使用 使用gitbook结合github提供的pages功能，可以让你非常方便的搭建起自己的知识管理平台，你可以把你日常的读书笔记、工作总结、方法论、以及任何有被记录价值的信息，记录在上面。 然后，你可以随时随地通过网页来访问这些内容，因为人的精力都是有限的，学过一次的东西就不需要从头再来，gitbook可以极大地节省信息检索的时间，同时可以让自身有一个积累。 本书籍地址 Github Pages: https://leoxulei.github.io/gitBookNotes/ GitBook: https://leoxulei.gitbook.io/leospace/ Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 11:25 "},"basicUse/installation/":{"url":"basicUse/installation/","title":"安装","keywords":"","body":" 安装 先安装node，以便使用npm来安装gitbook。 npm install gitbook-cli -g gitbook-cli 是gitbook的一个命令行工具，通过它可以安装和管理gitbook的多个版本。 gitbook fetch 3.0.0 // 安装指定版本 gitbook -V // 查看版本号：检测是否安装成功 安装完成，检查是否安装成功。 gitbook查询命令如下： 注意 执行 npm i gitbook-cli -g 后，执行 gitbook -V 时检测到已安装gitbook-cli、未安装gitbook，并自动开始安装最新版本gitbook。 gitbook安装过程耗时较长，18分钟左右（导致我以为出错，多次终止安装，查阅资料后发现有类似情况出现）。 Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 11:25 "},"basicUse/directoryStructure/":{"url":"basicUse/directoryStructure/","title":"目录结构","keywords":"","body":" 目录结构 GitBook 基本的目录结构如下所示 . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md README.md： 书籍的介绍文字，如前言、简介，在章节中也可做为章节的简介。 SUMMARY.md：书籍的目录结构，定制书籍的章节结构和顺序。左侧的目录就是根据这个文件来生成的，默认对应的文件是 SUMMARY.md，可以在 book.json 重新定义该文件的对应值。 book.json：配置信息 GLOSSARY.md：词汇/注释术语列表 Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 11:25 "},"basicUse/command/":{"url":"basicUse/command/","title":"基本命令","keywords":"","body":" 基本命令 gitbook -V // 查看版本号：查看gitbook和gitbook-cli的运行版本 gitbook ls // 列出本地所有的gitbook版本 gitbook init // 初始化书籍目录 gitbook install // 安装插件 gitbook serve // 预览 编译书籍 gitbook serve --log=debug // 编译过程debug打印信息 gitbook build // 生成 gitbook build --gitbook=2.6.7 // 生成时指定gitbook的版本， 本地没有会先下载 gitbook uninstall 2.6.7 // 卸载指定版本号的gitbook gitbook fetch [version] // 获取[版本]下载并安装 gitbook --help // 显示gitbook-cli帮助文档 gitbook help // 列出 gitbook 所有的命令 gitbook ls-remote // 列出NPM上的可用版本： Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 11:28 "},"basicUse/quickStart/":{"url":"basicUse/quickStart/","title":"快速开始","keywords":"","body":"快速开始 初始化目录 首先，在项目中创建如下目录结构并编辑文件： :. │ README.md │ SUMMARY.md ./README.md # This is a book powered by [GitBook](https://github.com/GitbookIO/gitbook). GitBook使用一个 SUMMARY.md 文件来定义文档的菜单。SUMMARY.md中[]内的内容是标题，()内是文档的路径，章节和子章节用四个空格或者tab键来分级。 每一个章节都有一个专用的页面（如 chapter1/README.md），并被分割成子章节。 我们可以使用 标题 或者 水平分割线 标志将 GitBook 的左侧目录分为几个不同的部分 ./SUMMARY.md * [Introduction](README.md) * [Chapter1](chapter1/README.md) * [Section1.1](chapter1/section1.1.md) * [Section1.2](chapter1/section1.2.md) * [Chapter2](chapter2/README.md) 编辑完成后，运行 gitbook init，来为我们创建 SUMMARY.md 中的目录结构： :. │ README.md │ SUMMARY.md │ ├─chapter1 │ README.md │ section1.1.md │ section1.2.md │ └─chapter2 README.md 注意：好像 gitbook init 只支持两级目录！ 预览 书籍目录结构创建完成、编辑完成以后，就可以使用 gitbook serve 来编译和预览书籍了： $ gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 7 plugins are installed info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 5 pages info: found 4 asset files info: >> generation finished with success in 3.0s ! Starting server ... Serving book on http://localhost:4000 gitbook serve： 命令实际上会首先调用 gitbook build 编译书籍，完成后会打开一个 web 服务器，通过http://localhost:4000/可以预览书籍。 gitbook build： 运行该命令后会在根目录中生成一个 _book 文件夹， 里面的内容即为生成的 html 文件，仅使用该命令用来生成网页而不开启服务器。 现在，gitbook为我们创建了书籍目录结构后，就可以向其中添加真正的内容了，文件的编写使用 markdown 语法，在文件修改过程中，每一次保存文件，gitbook serve 都会自动重新编译，所以可以持续通过浏览器来查看最新的书籍效果！ 另外，用户还可以下载 gitbook 编辑器，做到所见即所得的编辑，如下： Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 11:25 "},"basicUse/manageRelease/":{"url":"basicUse/manageRelease/","title":"管理发布","keywords":"","body":"管理发布 Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-01 19:04 "},"basicUse/manageRelease/githubManageBook.html":{"url":"basicUse/manageRelease/githubManageBook.html","title":"GitHub管理书籍","keywords":"","body":" GitHub管理书籍 创建仓库 本地项目与GitHub关联 项目内执行命令，如下: git init // 为书籍项目创建本地仓库 git add . git commit -m \"init project\" git remote add origin https://github.com/xxxxx.git // 与远程仓库关联 git push -u origin master Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-01 19:10 "},"basicUse/manageRelease/gitbookAssociateGithub.html":{"url":"basicUse/manageRelease/gitbookAssociateGithub.html","title":"Gitbook关联GitHub","keywords":"","body":" Gitbook关联GitHub 访问gitbook.com，如有GitHub帐号，可直接使用GitHub帐号进行授权注册，且后面书籍与GitHub项目进行关联时无需再次做GitHub授权操作（我采用这种）。当然，你也可以注册一个GitBook帐号（这种方式需要在setting中关联GitHub账号）。 登录并新建space space：项目 关联GitHub 选择关联仓库类型：public 选择要关联的仓库 选择要同步的分支 关联github仓库，可以默认选择主分支，也可以选择多个分支，选择多个分支的情况下，可以在gitbook网页浏览时进行切换 首次同步时的方式 关联中 书籍编辑界面 获取GitBook的访问连接 预览效果 地址格式：https://USERNAME.gitbook.io/SPACE_NAME/ Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-01 19:10 "},"basicUse/manageRelease/publishToGithubPages.html":{"url":"basicUse/manageRelease/publishToGithubPages.html","title":"发布到Github Pages","keywords":"","body":" 发布到Github Pages GitHub会为每个账号分配一个二级域名 USERNAME.github.io 作为用户的首页地址。实际上还可以为每个项目设置主页，项目主页也通过此二级域名进行访问。 只需要在项目版本库中创建一个名为gh-pages的分支，即可通过 http://USERNAME.github.io/PROJECT_NAME 访问。 将编写好的格式为.md的文件通过Gitbook编译得到_book目录下的一系列html文件，然后将这些文件发布到Github Pages上去。 .md文件为master分支，而hmtl文件为gh-pages分支。我个人比较喜欢将源码，即.md文件与Github Pages静态文件存放在一个仓库中。流程会简单点：（省去了切换分支，但是任然需要拷贝静态文件、单独push gh-pages分支到远程） 操作步骤 创建一个新分支： git checkout -b gh-pages，注意，分支名必须为gh-pages。 将分支push到仓库： git push -u origin gh-pages。 切换到主分支：git checkout master。 克隆gh-pages分支： git clone -b gh-pages git@github.com:USERNAME/PROJECT_NAME.git book-end。这步我们只克隆了gh-pages分支，并存放在一个新的目录book-end里面，且gitignore忽略book-end文件夹。 拷贝静态文件到book-end目录： cp -r _book/* book-end，本地编辑编译书籍后拷贝 _book 目录下一系列静态文件到book-end目录中(根目录下操作)。 push到远程gh-pages分支：需在 book-end 目录下push gh-pages 分支到远程仓库。 效果如下： Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 11:25 "},"expand/configuration.html":{"url":"expand/configuration.html","title":"配置","keywords":"","body":"GitBook配置 配置信息 book.json 是书籍的配置文件，记录GitBook的一些配置信息。 title - 标题 author - 作者信息 description - 书本描述 language - 使用的语言 gitbook - 指定gitbook版本 root - 指定存放 GitBook 文件的根目录 links - 在侧边栏添加链接 styles - 自定义样式 plugins - 插件 pluginsConfig - 插件配置 structure - 设置 Readme, Summary, Glossary等对应的文件 title 设置书本的标题 { \"titile\": \"GitBook 使用教程\", } author 作者的相关信息 { \"author\": \"leoXuLei\", } description 本书的简单描述 { \"description\": \"记录GitBook的安装、配置、使用\", } language Gitbook使用的语言，版本2.6.4中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw { \"language\": \"zh-hans\", } gitbook 指定使用的gitbook版本 { \"gitbook\": \">=3.2.3\", } root 指定存放 GitBook 文件（除了 book.json）的根目录 { \"root\": \".\" } links 在左侧导航栏添加链接信息 { \"links\" : { \"sidebar\" : { \"个人主页\" : \"http://xxxx.com\" } } } styles 默认情况下各generator对应的css文件 { \"styles\": { \"website\": \"/styles/website.css\", \"ebook\": \"/styles/ebook.css\", \"pdf\": \"/styles/pdf.css\", \"mobi\": \"/styles/mobi.css\", \"epub\": \"/styles/epub.css\" } } 例如使 标签有下边框， 可以在 根目录/styles 目录下的 website.css 中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } plugins 在 plugins 中添加要使用的插件，详情见 插件 { \"plugins\": [] } pluginsconfig 在 pluginsConfig 中配置插件的属性，详情见 插件 { \"pluginsConfig\": {} } structure 指定 Readme、Summary、Glossary 和 Languages 对应的文件名，下面是这几个文件对应变量以及默认值： 变量 含义和默认值 structure.readme Readme file name (defaults to README.md) structure.summary Summary file name (defaults to SUMMARY.md) structure.glossary Glossary file name (defaults to GLOSSARY.md) structure.languages Languages file name (defaults to LANGS.md) 本书的配置文件 { \"gitbook\": \">=3.2.3\", \"titile\": \"GitBook 使用教程\", \"description\": \"记录GitBook的安装、配置、使用\", \"author\": \"leoXuLei\", \"language\": \"zh-hans\", \"structure\": { \"readme\": \"README.md\", \"summary\": \"SUMMARY.md\" }, \"links\": { \"gitbook\": false, \"sharing\": { \"google\": false, \"facebook\": false, \"twitter\": false, \"all\": false } }, \"plugins\": [ \"-sharing\", \"-lunr\", \"-search\", \"-highlight\", \"search-plus\", \"anchors\", \"anchor-navigation-ex-toc\", \"tbfed-pagefooter\", \"code\", \"splitter\", \"expandable-chapters-small\", \"donate\", \"edit-link\", \"github\", \"lightbox\", \"prism\" ], \"pluginsConfig\":{ \"theme-default\": { \"showLevel\": false }, \"anchor-navigation-ex-toc\" : { \"showLevel\": true, \"multipleH1\":false, \"mode\": \"float\", \"showGoTop\":true, \"float\":{ \"floatIcon\": \"fa-navicon\", \"showLevelIcon\": false, \"level1Icon\": \"fa fa-navicon\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" }, \"pageTop\": { \"showLevelIcon\": true, \"level1Icon\": \"fa fa-navicon\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" } }, \"tbfed-pagefooter\": { \"copyright\":\"Copyright © leoXuLei 2020\", \"modify_label\": \"本文档更新于：\", \"modify_format\": \"YYYY-MM-DD HH:mm\" }, \"code\": { \"copyButtons\": true }, \"donate\": { \"wechat\": \"/imgs/weixin.png\", \"alipay\": \"/imgs/alipay.png\", \"title\": \"\", \"button\": \"打赏\", \"alipayText\": \"支付宝\", \"wechatText\": \"微信\" }, \"edit-link\": { \"base\": \"https://github.com/leoXuLei/gitBookNotes\", \"label\": \"编辑本页面\" }, \"github\": { \"url\": \"https://github.com/leoXuLei/gitBookNotes\" }, \"github-buttons\": { \"buttons\": [{ \"user\": \"leoXuLei\", \"repo\": \"gitBookNotes\", \"type\": \"star\", \"size\": \"small\", \"width\": \"100\" }] }, \"prism\": { \"css\": [ \"prismjs/themes/prism-okaidia.css\" ] } } } Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 11:33 "},"expand/plugin.html":{"url":"expand/plugin.html","title":"插件","keywords":"","body":" GitBook插件 为什么用插件 Gitbook插件可以解决一些网站不太方便的地方，如侧边栏导航不能收缩，自带搜索不支持中文等。 插件安装 gitbook install： 安装 book.json 文件 plugins 属性中指定的插件。 npm 命令安装：npm init 初始化 package.json 文件，然后通过 npm install gitbook-plugin-插件名 命令来快速安装依赖的插件。 插件的说明文档中，一般都建议使用 gitbook install 的方式安装插件，但是这种方式下载比较慢而且是全部插件都安装一遍，如果只安装一个插件的话建议使用 npm 命令方式安装。 注意：插件一定要在 book.json文件的 plugins中先添加才能生效，如果只是安装了插件，而没配置的话是不会生效的。 npm命令安装 npm init 后如下（可以发现之前通过 gitbook install 方式安装的插件也在依赖之中）： { \"name\": \"gitook\", \"version\": \"1.0.0\", \"description\": \"....\", \"main\": \"index.js\", \"dependencies\": { \"gitbook-plugin-anchor-navigation-ex-toc\": \"^0.0.11\", \"gitbook-plugin-copy-code-button\": \"^0.0.2\", \"gitbook-plugin-tbfed-pagefooter\": \"^0.0.1\", \"gitbook-plugin-anchors\": \"^0.7.1\", \"gitbook-plugin-search-plus\": \"^1.0.3\" }, \"devDependencies\": {}, \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"repository\": { \"type\": \"git\", \"url\": \"git+https://github.com/leoXuLei/gitBookNotes.git\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"bugs\": { \"url\": \"https://github.com/leoXuLei/gitBookNotes/issues\" }, \"homepage\": \"https://github.com/leoXuLei/gitBookNotes#readme\" } 示例：安装 splitter 插件如下，同时也会更新 package.json 文件中的依赖。 $ npm i gitbook-plugin-splitter npm notice created a lockfile as package-lock.json. You should commit this file. + gitbook-plugin-splitter@0.0.8 added 1 package from 1 contributor in 4.181s 插件配置 在 book.json 的 pluginsConfig 中对插件功能进行配置，本书配置文件见 本书籍配置文件 默认插件 GitBook 默认带有7个插件（功能性5个，搜索有2个，主题1个）： highlight： // 语法高亮 search： // 导航栏查询功能（不支持中文） sharing：// 右上角分享功能 font-settings：// 字体设置（最上方的\"A\"符号） livereload：// 为GitBook实时重新加载 lunr: // lunr 搜索插件后台服务 theme-default: // 主题 如果要去除自带的插件，可以在插件名称前面加 -，如下： \"plugins\": [ \"-sharing\", \"-lunr\", \"-search\", ] 常用插件 下面记录一些实用的插件，如果要指定插件的版本可以使用 plugin@0.3.1。下面的插件在 GitBook 的 3.2.2 版本中可以正常工作，因为一些插件可能不会随着 GitBook 版本的升级而升级，即下面的插件可能不适用高版本的 GitBook，所以这里指定了 GitBook 的版本。这里只是列举了一部分插件，如果有其它的需求，可以到 插件官网 搜索相关插件。 anchors - 添加 Github 风格的锚点 anchor-navigation-ex - 添加Toc到侧边悬浮导航以及回到顶部按钮 code - 代码块复制 copy-code-button - 代码块复制 donate - 打赏插件 edit-link - 链接到当前页源文件上 expandable-chapters-small - 使左侧的章节目录可以折叠 github - 添加github图标 github Buttons - 添加项目在 Github 上的 star、fork、watch 信息 lightbox - 图片点击弹窗显示 popup - 打开新的页面查看图片 prism - 代码块颜色插件 search -plus - 支持中文搜索 sharing - 分享当前页面 splitter - 使侧边栏的宽度可以自由调节 tbfed-pagefooter - 为页面添加页脚 versions-select - 多个版本选择 anchors 添加 Github 风格的锚点样式（标题不能有大写字母，可以有-） 使用格式： [说明文字](#标题) ## 标题 实例： [search -plus](#search-plus) ## search -plus { \"plugins\" : [ \"anchors\" ] } anchor-navigation-ex 添加Toc到侧边悬浮导航以及回到顶部按钮。需要注意以下两点： 本插件只会提取 h[1-3] 标签作为悬浮导航 只有按照以下顺序嵌套才会被提取# h1 ## h2 ### h3 必须要以 h1 开始，直接写 h2 不会被提取 ## h2 中文版说明 详细配置说明 { \"plugins\": [\"anchor-navigation-ex\"], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": true, // 标题是否显示层级序号，页面标题和导航中的标题都会加上层级显示。 \"associatedWithSummary\": true, // 页面内的序号是否与 summary.md 中官方默认主题生成的序号相关联。 \"printLog\": false, // 是否显示日志 \"multipleH1\": false, // 是否有多个H1标题 \"isRewritePageTitle\": true, \"isShowTocTitleIcon\": true, \"mode\": \"float\", \"showGoTop\":true, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" \"float\": { \"floatIcon\": \"fa fa-navicon\", // // 配置导航图标，如果你喜欢原先的 锚 图标可以配置为 fa-anchor \"showLevelIcon\": false, // 是否显示层级图标 \"level1Icon\": \"fa fa-hand-o-right\", //层级的图标css \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" }, \"pageTop\": { \"showLevelIcon\": false, \"level1Icon\": \"fa fa-navicon\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" } } } } code 为代码块添加复制的图标。跟 copy-code-button 插件相比较：添加了代码的行号，右上角还多了一个复制的图标，点击复制后图标变成对号。 { \"plugins\": [\"code\"] \"pluginsConfig\": { \"code\": { \"copyButtons\": true } } } copy-code-button 为代码块添加复制的按钮。图标显得有点突兀，可能和当前主题不搭。还有就是点击 Copy 以后，会全选当前的代码，有点奇怪。 { \"plugins\": [\"copy-code-button\"] } donate 打赏插件 { \"plugins\": [\"donate\"], \"pluginsConfig\": { \"donate\": { \"wechat\": \"https://xxxx.weixin.png\", \"alipay\": \"https://xxx.alipay.png\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } } edit-link 如果将 GitBook 的源文件保存到github或者其他的仓库上，使用该插件可以链接到当前页的源文件上。 { \"plugins\": [\"edit-link\"], \"pluginsConfig\": { \"edit-link\": { \"base\": \"https://github.com/USER/REPO/edit/BRANCH\", \"label\": \"Edit This Page\" } } } expandable-chapters-small 使左侧的章节目录可以折叠 { \"plugins\": [\"expandable-chapters-small\"] } github 右上角添加github图标，点击图标跳转到对应的Github地址。 { \"plugins\": [\"github\"], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/xxx/repo\" } } } 注意： 如果使用 npm 命令安装后报错 GitBook doesn't satisfy the requirements of this plugin: >=4.0.0-alpha.0. 请使用gitbook install来安装 或者 npm uninstall gitbook-plugin-github 卸载后，使用 npm i gitbook-plugin-github@2.0.0安装，然后查看是否还报错。 github-buttons 添加项目在 github 上的 star、watch、fork情况 \"size\": \"small\" || \"large\" \"width\": number \"height\": number { \"plugins\": [\"github-buttons\"], \"pluginsConfig\": { \"github-buttons\": { \"buttons\": [{ \"user\": \"leoXuLei\", \"repo\": \"gitBookNotes\", \"type\": \"star\", \"size\": \"small\", \"width\": \"100\", }, { \"user\": \"leoXuLei\", \"type\": \"follow\", \"width\": \"100\", \"count\": false, \"size\": \"small\" }] } } } 效果如下： lightbox 点击图片弹窗显示 { \"plugins\": [\"lightbox\"] } popup 点击图片打开新的页面查看图片 { \"plugins\": [\"popup\"] } prism 代码块颜色插件，插件地址 { \"plugins\": [\"prism\", \"-highlight\"], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prismjs/themes/prism-okaidia.css\" ] } } // syntax-highlighting/assets/css/prism/prism-xonokai.css } 默认代码块风格（未加JS标识）： 默认代码块风格（加了JS标识）： 使用 prism 代码块风格 prism-okaidia.css （未加JS标识）： 使用 prism 代码块风格 prism-okaidia.css （加JS标识）： search -plus 支持中文搜索，需要将默认的 search 和 lunr 插件去掉。 { \"plugins\": [\"-lunr\", \"-search\", \"search-plus\"] } sharing 分享当前页面，gitbook的默认插件，使用下面方式来禁用 { \"plugins\": [\"-sharing\"] } 配置： \"pluginsConfig\": { \"sharing\": { \"weibo\": true, \"facebook\": true, \"twitter\": true, \"google\": false, \"instapaper\": false, \"vk\": false, \"all\": [ \"facebook\", \"google\", \"twitter\", \"weibo\", \"instapaper\" ] } } splitter 使侧边栏的宽度可以自由调节 { \"plugins\": [\"splitter\"] } tbfed-pagefooter 为页面添加页脚 { \"plugins\": [ \"tbfed-pagefooter\"], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy zhangjikai.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } versions-select 添加版本选择的下拉菜单，针对文档有多个版本的情况 { \"plugins\": [ \"versions-select\" ] \"pluginsConfig\":{ \"versions\": { \"options\": [ { \"value\": \"https://www.gitbook.com\", \"text\": \"v1.0\" }, { \"value\": \"https://www.gitbook.com\", \"text\": \"v2.0\" } ] } } } Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 12:52 "},"expand/theme.html":{"url":"expand/theme.html","title":"主题","keywords":"","body":" 主题 虽然gitbook默认的主题已经非常不错，但是，还有一些非常值得推荐的主题，用户可以通过在 NPM 上搜索 gitbook-theme 来查找主题插件。 目前 GitBook 提供了三类文档： Book 文档、API 文档、FAQ 文档。 我们常用的就是 Book 文档模式，如果我们需要使用 API 文档模式或者 FAQ 文档模式，只需引入文档对应的主题插件即可，下面我们介绍与这三类文档相关的主题插件。 theme-default theme-default 是默认的 Book 主题。 将 showLevel 设为 true， 就可以显示标题前面的数字索引，默认不显示。 { \"pluginsConfig\": { \"theme-default\": { \"showLevel\": true } } } theme-comscore comscore 是一个彩色主题，默认的 gitbook 主题是黑白的，也就是标题和正文都是黑色的，而 comscore 可以为各级标题添加不同的颜色，更容易区分各级标题。 { \"plugins\": [ \"theme-comscore\" ] } 使用前后对比效果如下所示： 使用前： 使用后： Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 11:25 "},"other/problem.html":{"url":"other/problem.html","title":"问题","keywords":"","body":" 问题 启动后编辑热加载失败问题 gitbook 在Windows系统无法热加载，总是报错！ 通过 gitbook serve --log=debug 命令可以打印MarkDown转为HTML过程中的日志 $ gitbook serve --log=debug Live reload server started on port: 35729 Press CTRL+C to quit ... debug: readme found at README.md debug: summary file found at SUMMARY.md debug: cleanup folder \"F:\\IT工具\\gitBook\\_book\" info: 7 plugins are installed info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 9 pages info: found 31 asset files debug: calling hook \"config\" debug: calling hook \"init\" debug: copy assets from theme C:\\Users\\Administrator\\.gitbook\\versions\\3.2.3\\nod e_modules\\gitbook-plugin-theme-default\\_assets\\website debug: copy resources from plugin C:\\Users\\Administrator\\.gitbook\\versions\\3.2.3 \\node_modules\\gitbook-plugin-fontsettings\\assets debug: copy resources from plugin C:\\Users\\Administrator\\.gitbook\\versions\\3.2.3 \\node_modules\\gitbook-plugin-sharing\\assets debug: copy resources from plugin C:\\Users\\Administrator\\.gitbook\\versions\\3.2.3 \\node_modules\\gitbook-plugin-lunr\\assets debug: copy resources from plugin C:\\Users\\Administrator\\.gitbook\\versions\\3.2.3 \\node_modules\\gitbook-plugin-search\\assets debug: copy resources from plugin C:\\Users\\Administrator\\.gitbook\\versions\\3.2.3 \\node_modules\\gitbook-plugin-highlight\\css debug: copy resources from plugin C:\\Users\\Administrator\\.gitbook\\versions\\3.2.3 \\node_modules\\gitbook-plugin-livereload\\book debug: copy asset \".gitignore\" debug: copy asset \"basicUse\\basicUse.md\" debug: copy asset \"imgs\\ghPagesDeployments.png\" debug: copy asset \"imgs\\gitBookComSpaces.png\" debug: copy asset \"imgs\\gitBookPreview.png\" debug: copy asset \"imgs\\gitCreateRepo.png\" debug: copy asset \"imgs\\gitEnvironments.png\" debug: copy asset \"imgs\\gitPagesPreview.png\" debug: copy asset \"imgs\\gitbookCommand.png\" debug: copy asset \"imgs\\gitbookFetch_1.png\" debug: copy asset \"imgs\\gitbookFetch_2.png\" debug: copy asset \"imgs\\gitbookHotReplaceFailure.png\" debug: copy asset \"imgs\\gitbookInit.png\" debug: copy asset \"imgs\\gitbookServe.png\" debug: copy asset \"imgs\\githubPagesSettings.png\" debug: copy asset \"imgs\\githubProjectRepo.png\" debug: copy asset \"imgs\\linkGitHubRepo.png\" debug: copy asset \"imgs\\linkGitHubRepoFirstSync.png\" debug: copy asset \"imgs\\linkGitHubRepoSelect.png\" debug: copy asset \"imgs\\linkGitHubRepoSelectBranch.png\" debug: copy asset \"imgs\\linkedGitHubRepo.png\" debug: copy asset \"imgs\\linkingGitHubRepo.png\" debug: copy asset \"imgs\\npmGitbookCli.png\" debug: copy asset \"imgs\\shareLink.png\" debug: copy asset \"installation\\installation.md\" debug: copy asset \"manageRelease\\README.md\" debug: copy asset \"manageRelease\\gitbookAssociateGithub.md\" debug: copy asset \"manageRelease\\githubManageBook.md\" debug: copy asset \"manageRelease\\publishToGithubPages.md\" debug: copy asset \"problem\\README.md\" debug: copy asset \"reference\\reference.md\" debug: generate page \"README.md\" debug: calling hook \"page:before\" debug: calling hook \"page\" debug: index page README.md debug: generate page \"installation/installation.md\" debug: calling hook \"page:before\" debug: calling hook \"page\" debug: index page installation/installation.md debug: generate page \"basicUse/basicUse.md\" debug: calling hook \"page:before\" debug: calling hook \"page\" debug: index page basicUse/basicUse.md debug: generate page \"manageRelease/README.md\" debug: calling hook \"page:before\" debug: calling hook \"page\" debug: index page manageRelease/README.md debug: generate page \"manageRelease/githubManageBook.md\" debug: calling hook \"page:before\" debug: calling hook \"page\" debug: index page manageRelease/githubManageBook.md debug: generate page \"manageRelease/gitbookAssociateGithub.md\" debug: calling hook \"page:before\" debug: calling hook \"page\" debug: index page manageRelease/gitbookAssociateGithub.md debug: generate page \"manageRelease/publishToGithubPages.md\" debug: calling hook \"page:before\" debug: calling hook \"page\" debug: index page manageRelease/publishToGithubPages.md debug: generate page \"problem/README.md\" debug: calling hook \"page:before\" debug: calling hook \"page\" debug: index page problem/README.md debug: generate page \"reference/reference.md\" debug: calling hook \"page:before\" debug: calling hook \"page\" debug: index page reference/reference.md debug: calling hook \"finish:before\" debug: calling hook \"finish\" debug: write search index info: >> generation finished with success in 3.2s ! Starting server ... Serving book on http://localhost:4000 单行代码显示问题 单行代码虽然有背景色，但颜色是黑色显示不明显。如下: 解决方法是配置自定义样式 在根目录/styles 目录下的 website.css 中设置样式（不直接设置 .markdown-section code 是不想影响多行代码块中 code 的样式） .markdown-section p code, .markdown-section ul code { color: #c7254e; } 在book.json中配置： \"styles\": { \"website\": \"/styles/website.css\" } 效果如下： 发布后打赏图片404问题 发布到 GitHub Pages 后发现打赏图片404问题，如下： 发现打赏图片地址有问题：https://leoxulei.github.io/imgs/weixin.png 正常显示的都是在MD文件中引入的，图片地址格式为：https://leoxulei.github.io/gitBookNotes/imgs/xxx.png 修改后重新发布到 GitHub Pages，问题解决。 Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 14:44 "},"other/reference.html":{"url":"other/reference.html","title":"参考资料","keywords":"","body":" 参考资料 GitBook 简明教程 Gitbook 入门教程 Gitbook 使用教程 GitBook的安装、卸载、常见问题 本地Gitbook安装和使用（windows下） 插件 Github和GitBook使用 使用GitHub与Gitbook制作自己的书籍 gitbook.com 官网操作 Gitbook 使用入门 GitBook源文件发布到gh-pages 使用 Gitbook 打造你的电子书 GitBook 简明教程 (超详细) 如何优雅地使用Gitbook gitbook插件 gitbook常用的插件 Copyright © leoXuLei 2020 all right reserved，powered by Gitbook本文档更新于： 2020-08-02 12:43 "}}